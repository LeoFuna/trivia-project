{"version":3,"sources":["actions/index.js","reducers/token.js","reducers/user.js","reducers/questions.js","reducers/timer.js","reducers/index.js","store/index.js","trivia.png","components/login/Header.jsx","components/login/Card.jsx","pages/Login.jsx","components/feedback/Header.jsx","components/feedback/Scoreboard.jsx","pages/Feedback.jsx","components/quiz/Header.jsx","components/quiz/ButtonNext.jsx","components/quiz/Answers.jsx","components/general/Loading.jsx","components/quiz/Timer.jsx","components/quiz/Questions.jsx","pages/Quiz.jsx","components/ranking/Header.jsx","components/ranking/TableRanking.jsx","components/ranking/ButtonReturn.jsx","pages/Ranking.jsx","pages/Setting.jsx","Routes.js","App.js","serviceWorker.js","index.js"],"names":["GET_TOKEN","GET_TOKEN_SUCCESS","GET_TOKEN_FAILED","GET_USER_INFO","GET_QUESTIONS","GET_QUESTIONS_SUCCESS","GET_QUESTIONS_FAILED","UPDATE_SCORE","RESET_COUNTDOWN","DECREASE_COUNTDOWN","getTokenFailed","payload","type","getQuestionsFailed","INITIAL_STATE","token","tokenReducer","state","action","loading","error","user","name","email","urlAvatar","score","assertions","userReducer","questions","questionsReducer","results","timer","timeReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Header","className","src","logo","alt","React","Component","Card","props","nome","isDisabled","handleChange","bind","handleSubmit","fetchToken","this","getToken","target","value","setState","length","getUser","localStorage","setItem","hash","md5","toString","url","player","gravatarEmail","JSON","stringify","placeholder","onChange","to","disabled","onClick","connect","dispatch","a","fetch","response","json","getUserInfo","Login","Scorebboard","updateRanking","getItem","prevRankingString","prevRanking","parse","push","picture","playerStorageString","playerStorage","Feedback","Scoreboard","ButtonNext","testid","nextQuestion","btnState","style","display","Answers","questionsList","correct_answer","innerHTML","handleButtons","updateUser","verifyIfIsCorrect","scoreDataBase","base","hard","medium","easy","difficulty","shuffledAnswers","map","answer","index","event","verifyAnswer","replace","createOptionsAnswers","updateScore","Loading","Timer","Questions","indexQuestion","endGame","buttonDisabled","timerCountDown","fetchTrivia","startTime","updateCountdown","shuffleAnswers","clearInterval","setUpdateTimer","getQuestions","setTimer","setTimeout","decreaseTimerCountdown","setInterval","questionAnswers","incorrect_answers","indexStandard","indexToSwap","Math","floor","random","resetTimerCountdown","currentState","hasAnswered","question","category","getQuestionsThunk","Quiz","TableRanking","ranking","sort","b","reverse","ButtonReturn","Ranking","isLoading","getRankingStorage","playersParse","playersStorage","Setting","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32675944.chunk.js","sourcesContent":["export const GET_TOKEN = 'GET_TOKEN';\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\nexport const GET_TOKEN_FAILED = 'GET_TOKEN_FAILED';\nexport const GET_USER_INFO = 'GET_USER_INFO';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const GET_QUESTIONS_SUCCESS = 'GET_QUESTIONS_SUCCESS';\nexport const GET_QUESTIONS_FAILED = 'GET_QUESTIONS_FAILED';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const RESET_COUNTDOWN = 'RESET_COUNTDOWN';\nexport const DECREASE_COUNTDOWN = 'DECREASE_COUNTDOWN';\n\nexport const getUserInfo = (payload) => ({\n  type: GET_USER_INFO,\n  payload,\n});\n\nexport const getToken = () => ({\n  type: GET_TOKEN,\n});\n\nexport const getTokenSuccess = (payload) => ({\n  type: GET_TOKEN_SUCCESS,\n  payload,\n});\n\nexport const getTokenFailed = (payload) => ({\n  type: GET_TOKEN_FAILED,\n  payload,\n});\n\nexport const getTokenThunk = () => async (dispatch) => {\n  dispatch(getToken());\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const results = await response.json();\n    dispatch(getTokenSuccess(results));\n  } catch (error) {\n    dispatch(getTokenFailed(error));\n  }\n};\n\nexport const getQuestions = () => ({\n  type: GET_QUESTIONS,\n});\n\nexport const getQuestionsSuccess = (payload) => ({\n  type: GET_QUESTIONS_SUCCESS,\n  payload,\n});\n\nexport const getQuestionsFailed = (payload) => ({\n  type: GET_QUESTIONS_FAILED,\n  payload,\n});\n\nexport const getQuestionsThunk = (token) => async (dispatch) => {\n  dispatch(getQuestions());\n  try {\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const results = await response.json();\n    dispatch(getQuestionsSuccess(results));\n  } catch (error) {\n    dispatch(getQuestionsFailed(error));\n  }\n};\n\nexport const updateScore = (payload) => ({\n  type: UPDATE_SCORE,\n  payload,\n});\n\nexport const resetCountdown = () => ({\n  type: RESET_COUNTDOWN,\n});\n\nexport const decreaseCountdown = () => ({\n  type: DECREASE_COUNTDOWN,\n});\n","import { GET_TOKEN, GET_TOKEN_FAILED, GET_TOKEN_SUCCESS } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nfunction tokenReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_TOKEN:\n    return {\n      ...state,\n      loading: true,\n    };\n  case GET_TOKEN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload.token,\n      loading: false,\n    };\n  case GET_TOKEN_FAILED:\n    return {\n      ...state,\n      error: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default tokenReducer;\n","import { GET_USER_INFO, UPDATE_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  user: {\n    name: '',\n    email: '',\n    urlAvatar: '',\n    score: 0,\n    assertions: 0,\n  },\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_USER_INFO:\n    return {\n      ...state,\n      user: action.payload,\n    };\n  case UPDATE_SCORE:\n    return {\n      ...state,\n      user: {\n        ...state.user,\n        score: action.payload.score,\n        assertions: action.payload.assertions,\n      },\n    };\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","import { GET_QUESTIONS, GET_QUESTIONS_FAILED, GET_QUESTIONS_SUCCESS } from '../actions';\n\nconst INITIAL_STATE = {\n  questions: [],\n};\n\nfunction questionsReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_QUESTIONS:\n    return {\n      ...state,\n      loading: true,\n    };\n  case GET_QUESTIONS_SUCCESS:\n    return {\n      ...state,\n      questions: action.payload.results,\n      loading: false,\n    };\n  case GET_QUESTIONS_FAILED:\n    return {\n      ...state,\n      error: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default questionsReducer;\n","import { DECREASE_COUNTDOWN, RESET_COUNTDOWN } from '../actions';\n\nconst INITIAL_STATE = {\n  timer: 30,\n};\n\nfunction timeReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case DECREASE_COUNTDOWN:\n    return {\n      timer: state.timer - 1,\n    };\n  case RESET_COUNTDOWN:\n    return {\n      timer: 30,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default timeReducer;\n","import { combineReducers } from 'redux';\nimport token from './token';\nimport user from './user';\nimport questions from './questions';\nimport timer from './timer';\n\nconst rootReducer = combineReducers({\n  token,\n  user,\n  questions,\n  timer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","export default __webpack_public_path__ + \"static/media/trivia.7e9181d3.png\";","import React from 'react';\nimport logo from '../../trivia.png';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"header-login\">\n        <img src={ logo } className=\"App-logo\" alt=\"Logo\" />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { getTokenThunk, getUserInfo } from '../../actions';\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nome: '',\n      email: '',\n      isDisabled: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchToken = this.fetchToken.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchToken();\n  }\n\n  fetchToken() {\n    const { getToken } = this.props;\n    getToken();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    }, () => {\n      const { nome, email } = this.state;\n      if (nome.length > 0 && email.length > 0) {\n        this.setState({\n          isDisabled: false,\n        });\n      } else {\n        this.setState({\n          isDisabled: true,\n        });\n      }\n    });\n  }\n\n  handleSubmit() {\n    const { token, getUser } = this.props;\n    localStorage.setItem('token', token);\n    const { email, nome } = this.state;\n    const hash = md5(email).toString();\n    const url = `https://www.gravatar.com/avatar/${hash}`;\n    const player = { name: nome, assertions: 0, score: 0, gravatarEmail: email };\n    localStorage.setItem('state', JSON.stringify({ player }));\n\n    getUser({ nome, email, url, score: 0 });\n  }\n\n  render() {\n    const { nome, email, isDisabled } = this.state;\n    return (\n      <div className=\"container-form-login\">\n        <form className=\"card-login\">\n          <h1>Login</h1>\n          <input\n            className=\"input-field-login\"\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            name=\"nome\"\n            placeholder=\"Nome:\"\n            value={ nome }\n            onChange={ this.handleChange }\n          />\n          <input\n            className=\"input-field-login\"\n            type=\"email\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n          <Link to=\"quiz\">\n            <button\n              className=\"button-login\"\n              disabled={ isDisabled }\n              data-testid=\"btn-play\"\n              type=\"button\"\n              onClick={ this.handleSubmit }\n            >\n              Jogar\n            </button>\n          </Link>\n          <hr className=\"hr-login\" />\n          {/* <Link to=\"/settings\">\n            <button\n              className=\"settings-button\"\n              type=\"button\"\n              data-testid=\"btn-settings\"\n            >\n              Configurações\n            </button>\n          </Link> */}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(getTokenThunk()),\n  getUser: (payload) => dispatch(getUserInfo(payload)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.token.token,\n});\n\nCard.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  getUser: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n","import React from 'react';\n// import { Link } from 'react-router-dom';\nimport Header from '../components/login/Header';\nimport CardLogin from '../components/login/Card';\nimport '../style/login.css';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div className=\"login-container\">\n        <Header />\n        <CardLogin />\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    const { user } = this.props;\n    const { nome, url, score } = user;\n    return (\n      <header className=\"header-feedback\">\n        <img data-testid=\"header-profile-picture\" src={ url } alt={ nome } />\n        <h1 data-testid=\"header-player-name\">{ nome }</h1>\n        <h1>\n          Pontuação:\n          { ' ' }\n          <span data-testid=\"header-score\">{ score }</span>\n        </h1>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n});\n\nHeader.propTypes = {\n  user: PropTypes.shape({\n    nome: PropTypes.string,\n    url: PropTypes.string,\n    score: PropTypes.number,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass Scorebboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.updateRanking();\n  }\n\n  updateRanking() {\n    const { user: { nome, score, url } } = this.props;\n    const getRanking = localStorage.getItem('ranking');\n    if (!getRanking) {\n      localStorage.setItem('ranking',\n        JSON.stringify([{ name: nome, score, picture: url }]));\n    } else {\n      const prevRankingString = localStorage.getItem('ranking');\n      const prevRanking = JSON.parse(prevRankingString);\n      prevRanking.push({ name: nome, score, picture: url });\n      localStorage.setItem('ranking', JSON.stringify(prevRanking));\n    }\n  }\n\n  render() {\n    const playerStorageString = localStorage.getItem('state');\n    const playerStorage = JSON.parse(playerStorageString);\n    return (\n      <div className=\"feedback-scoreboard\">\n        <h2>\n          Você acertou:\n          <span data-testid=\"feedback-total-question\">\n            { playerStorage.player.assertions }\n          </span>\n          de 5 perguntas.\n        </h2>\n        <h2>\n          Você fez:\n          {' '}\n          <span\n            data-testid=\"feedback-total-score\"\n          >\n            { playerStorage.player.score }\n          </span>\n          {' '}\n          pontos.\n        </h2>\n\n        <div className=\"feedback-scoreboard-button\">\n          <Link to=\"/\">\n            <button\n              className=\"feedback-buttons\"\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n            >\n              Jogar Novamente\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n});\n\nScorebboard.propTypes = {\n  user: PropTypes.shape({\n    score: PropTypes.number,\n    assertions: PropTypes.number,\n    nome: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Scorebboard);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Header from '../components/feedback/Header';\nimport Scoreboard from '../components/feedback/Scoreboard';\nimport '../style/feedback.css';\n\nclass Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    const minHit = 3;\n    // const { user: { assertions } } = this.props;\n    const playerStorageString = localStorage.getItem('state');\n    const playerStorage = JSON.parse(playerStorageString);\n    return (\n      <>\n        <Header />\n        <div className=\"container-feedback\">\n          <h1 data-testid=\"feedback-text\" className=\"feedback-title\">\n            {\n              (playerStorage.player.assertions >= minHit)\n                ? 'Mandou bem!'\n                : 'Podia ser melhor...'\n            }\n          </h1>\n          <Scoreboard />\n          <hr className=\"hr-feedback\" />\n          <Link to=\"/ranking\">\n            <button className=\"feedback-buttons\" type=\"button\" data-testid=\"btn-ranking\">\n              Ver Ranking\n            </button>\n          </Link>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n});\n\nFeedback.propTypes = {\n  user: PropTypes.shape({\n    score: PropTypes.number,\n    assertions: PropTypes.number,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    const { user } = this.props;\n    const { nome, url, score } = user;\n    return (\n      <header className=\"header-quiz\">\n        <img data-testid=\"header-profile-picture\" src={ url } alt={ nome } />\n        <h1 data-testid=\"header-player-name\">{ nome }</h1>\n        <h1>\n          Pontuação:\n          {' '}\n          <span data-testid=\"header-score\">{ score }</span>\n        </h1>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.user,\n});\n\nHeader.propTypes = {\n  user: PropTypes.shape({\n    nome: PropTypes.string,\n    url: PropTypes.string,\n    score: PropTypes.number,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ButtonNext extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    const { testid, nextQuestion, btnState } = this.props;\n    return (\n      <div className=\"container-button-next\">\n        <button\n          style={ { display: btnState ? 'block' : 'none' } }\n          className=\"button-next\"\n          data-testid={ testid }\n          type=\"button\"\n          onClick={ nextQuestion }\n        >\n          Proximo\n        </button>\n      </div>\n    );\n  }\n}\n\nButtonNext.propTypes = {\n  testid: PropTypes.string.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  btnState: PropTypes.bool.isRequired,\n};\n\nexport default ButtonNext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateScore } from '../../actions';\n\nclass Answers extends React.Component {\n  verifyIfIsCorrect(target) {\n    const { questionsList } = this.props;\n    if (questionsList.correct_answer === target.innerHTML) {\n      return true;\n    }\n    return false;\n  }\n\n  verifyAnswer({ target }) {\n    const { handleButtons, questionsList, timer, updateUser } = this.props;\n    handleButtons(true);\n    const isCorrect = this.verifyIfIsCorrect(target);\n    if (isCorrect) {\n      const scoreDataBase = { base: 10, hard: 3, medium: 2, easy: 1 };\n      const playerStorageString = localStorage.getItem('state');\n      const playerStorage = JSON.parse(playerStorageString);\n      playerStorage.player.assertions += 1;\n      switch (questionsList.difficulty) {\n      case 'hard':\n        playerStorage.player.score += scoreDataBase.base + (timer * scoreDataBase.hard);\n        updateUser({\n          score: playerStorage.player.score, assertions: playerStorage.player.assertions,\n        });\n        return localStorage.setItem('state', JSON.stringify(playerStorage));\n      case 'medium':\n        playerStorage.player.score += scoreDataBase.base + (timer * scoreDataBase.medium);\n        updateUser({\n          score: playerStorage.player.score, assertions: playerStorage.player.assertions,\n        });\n        return localStorage.setItem('state', JSON.stringify(playerStorage));\n      case 'easy':\n        playerStorage.player.score += scoreDataBase.base + (timer * scoreDataBase.easy);\n        updateUser({\n          score: playerStorage.player.score, assertions: playerStorage.player.assertions,\n        });\n        return localStorage.setItem('state', JSON.stringify(playerStorage));\n      default:\n        return 0;\n      }\n    }\n    return 0;\n  }\n\n  createOptionsAnswers() {\n    const { questionsList, isDisabled, shuffledAnswers } = this.props;\n    return shuffledAnswers.map((answer, index) => {\n      if (questionsList.correct_answer === answer) {\n        return (\n          <li className=\"item-list-buttons-quiz\" key={ index }>\n            <button\n              disabled={ isDisabled }\n              data-testid=\"correct-answer\"\n              className={ isDisabled ? 'li-quiz-button correct-answer correct'\n                : 'li-quiz-button correct' }\n              type=\"button\"\n              onClick={ (event) => this.verifyAnswer(event) }\n            >\n              { answer.replace(/&amp;/g, ' ').replace(/&quot;/g, ' ')\n                .replace(/&#039;/g, ' ') }\n            </button>\n          </li>\n        );\n      }\n      return (\n        <li className=\"item-list-buttons-quiz\" key={ index }>\n          <button\n            disabled={ isDisabled }\n            data-testid={ `wrong-answer-${index}` }\n            className={ isDisabled ? 'li-quiz-button wrong-answer' : 'li-quiz-button' }\n            type=\"button\"\n            onClick={ (event) => this.verifyAnswer(event) }\n          >\n            { answer.replace(/&amp;/g, ' ').replace(/&quot;/g, ' ')\n              .replace(/&#039;/g, ' ') }\n          </button>\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <ul className=\"list-buttons-quiz\">\n        { this.createOptionsAnswers() }\n      </ul>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateUser: (payload) => dispatch(updateScore(payload)),\n});\n\nAnswers.propTypes = {\n  questionsList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n  handleButtons: PropTypes.func.isRequired,\n  timer: PropTypes.number.isRequired,\n  updateUser: PropTypes.func.isRequired,\n  shuffledAnswers: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Answers);\n","import React from 'react';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <div className=\"spinner\" />\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Timer extends React.Component {\n  render() {\n    const { timer } = this.props;\n    return (\n      <div className=\"center\">\n        <h3 className=\"timer\">{timer}</h3>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  timer: state.timer.timer,\n});\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Timer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getQuestionsThunk, decreaseCountdown, resetCountdown } from '../../actions';\nimport ButtonNext from './ButtonNext';\nimport Answers from './Answers';\nimport Loading from '../general/Loading';\nimport Timer from './Timer';\n\nclass Questions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionsList: [],\n      indexQuestion: 0,\n      shuffledAnswers: [],\n      endGame: false,\n      buttonDisabled: false,\n      timerCountDown: 30,\n    };\n    this.fetchTrivia = this.fetchTrivia.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.startTime = this.startTime.bind(this);\n    this.handleButtons = this.handleButtons.bind(this);\n    this.updateCountdown = this.updateCountdown.bind(this);\n    this.shuffleAnswers = this.shuffleAnswers.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.fetchTrivia();\n    this.shuffleAnswers();\n  }\n\n  componentDidUpdate() {\n    const { timer } = this.props;\n    if (timer <= 0) {\n      clearInterval(this.setUpdateTimer);\n    }\n  }\n\n  async fetchTrivia() {\n    const { token, getQuestions } = this.props;\n    await getQuestions(token);\n    const { questions } = this.props;\n    this.setState({\n      questionsList: questions,\n    }, () => { this.updateCountdown(); this.startTime(); });\n  }\n\n  handleButtons(disabled) {\n    clearInterval(this.setUpdateTimer);\n    this.setState({\n      buttonDisabled: disabled,\n    });\n  }\n\n  startTime() {\n    const timer = 30000;\n    this.setTimer = setTimeout(() => this.handleButtons(true), timer);\n  }\n\n  updateCountdown() {\n    const { decreaseTimerCountdown } = this.props;\n    const timerDecrease = 1000;\n    this.setUpdateTimer = setInterval(() => decreaseTimerCountdown(), timerDecrease);\n  }\n\n  shuffleAnswers() {\n    const { questionsList, indexQuestion } = this.state;\n    if (questionsList.length !== 0) {\n      const questionAnswers = [questionsList[indexQuestion].correct_answer,\n        ...questionsList[indexQuestion].incorrect_answers];\n      for (let indexStandard = questionAnswers.length - 1;\n        indexStandard > 0; indexStandard -= 1) {\n        const indexToSwap = Math.floor(Math.random() * (indexStandard + 1));\n        [questionAnswers[indexStandard], questionAnswers[indexToSwap]] = [\n          questionAnswers[indexToSwap], questionAnswers[indexStandard]];\n      }\n      this.setState({\n        shuffledAnswers: questionAnswers,\n      });\n    }\n  }\n\n  nextQuestion() {\n    clearInterval(this.setTimer);\n    const { resetTimerCountdown } = this.props;\n    this.setState((currentState) => {\n      const finalArray = 3;\n      if (currentState.indexQuestion < finalArray) {\n        return {\n          indexQuestion: currentState.indexQuestion + 1,\n          hasAnswered: false,\n          timerCountDown: 30,\n        };\n      }\n      return {\n        indexQuestion: currentState.indexQuestion + 1,\n        endGame: true,\n        hasAnswered: false,\n        timerCountDown: 30,\n      };\n    }, () => this.shuffleAnswers());\n    this.handleButtons(false);\n    resetTimerCountdown();\n    this.updateCountdown();\n    this.startTime();\n  }\n\n  render() {\n    const { loading } = this.props;\n    const { questionsList, indexQuestion, endGame, buttonDisabled,\n      timerCountDown, shuffledAnswers } = this.state;\n    if (!loading && questionsList.length !== 0) {\n      return (\n        <div className=\"card-question-quiz\">\n          <div className=\"info-question-quiz\">\n            <p data-testid=\"question-text\">\n              { questionsList[indexQuestion].question.replace(/&quot;/g, ' ')\n                .replace(/&#039;/g, ' ').replace(/&amp;/g, ' ') }\n            </p>\n            <p data-testid=\"question-category\">\n              { questionsList[indexQuestion].category }\n            </p>\n            <Timer timer={ timerCountDown } />\n          </div>\n          <Answers\n            handleButtons={ this.handleButtons }\n            timer={ timerCountDown }\n            questionsList={ questionsList[indexQuestion] }\n            shuffledAnswers={ shuffledAnswers }\n            isDisabled={ buttonDisabled }\n          />\n          { !endGame ? <ButtonNext\n            btnState={ buttonDisabled }\n            testid=\"btn-next\"\n            nextQuestion={ this.nextQuestion }\n          />\n            : (\n              <Link to=\"/feedback\">\n                <ButtonNext btnState={ buttonDisabled } testid=\"btn-next\" />\n              </Link>)}\n        </div>\n      );\n    }\n    return (<Loading />);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (token) => dispatch(getQuestionsThunk(token)),\n  resetTimerCountdown: () => dispatch(resetCountdown()),\n  decreaseTimerCountdown: () => dispatch(decreaseCountdown()),\n});\n\nconst mapStateToProps = (state) => ({\n  timer: state.timer.timer,\n  token: state.token.token,\n  questions: state.questions.questions,\n  loading: state.questions.loading,\n});\n\nQuestions.propTypes = {\n  timer: PropTypes.number.isRequired,\n  decreaseTimerCountdown: PropTypes.func.isRequired,\n  resetTimerCountdown: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loading: PropTypes.bool.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import React from 'react';\nimport Header from '../components/quiz/Header';\nimport Questions from '../components/quiz/Questions';\nimport '../style/quiz.css';\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-quiz\">\n          <Questions />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n","import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"header-ranking\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TableRanking extends React.Component {\n  render() {\n    const { ranking } = this.props;\n    return (\n      <table className=\"ranking-table\">\n        <thead className=\"ranking-thead\">\n          <tr>\n            <th>#</th>\n            <th>Nome</th>\n            <th>Pontos</th>\n          </tr>\n        </thead>\n        <tbody className=\"ranking-tbody\">\n          {ranking.sort((a, b) => a.score - b.score).reverse()\n            .map((player, index) => (\n              <tr className={ index % 2 === 0 ? 'indexPair' : 'indexOdd' } key={ index }>\n                <td>{ index + 1}</td>\n                <td className=\"td-flex\">\n                  <img\n                    data-testid={ `player-picture-${index}` }\n                    src={ player.picture }\n                    alt=\"Imagem do avatar\"\n                  />\n                  <p data-testid={ `player-name-${index}` }>{player.name}</p>\n                </td>\n                <td data-testid={ `player-score-${index}` }>{player.score}</td>\n              </tr>))}\n\n        </tbody>\n      </table>\n    );\n  }\n}\n\nTableRanking.propTypes = {\n  ranking: PropTypes.arrayOf(Object).isRequired,\n};\n\nexport default TableRanking;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ButtonReturn extends Component {\n  render() {\n    return (\n      <div className=\"ranking-button\">\n        <Link to=\"/\">\n          <button\n            className=\"feedback-buttons\"\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n          >\n            Voltar ao inicio\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default ButtonReturn;\n","import React, { Component } from 'react';\nimport Loading from '../components/general/Loading';\nimport Header from '../components/ranking/Header';\nimport Table from '../components/ranking/TableRanking';\nimport Button from '../components/ranking/ButtonReturn';\nimport '../style/ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: true,\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getRankingStorage();\n  }\n\n  getRankingStorage() {\n    const playersParse = localStorage.getItem('ranking');\n    const playersStorage = JSON.parse(playersParse);\n    this.setState({\n      isLoading: false,\n      ranking: playersStorage,\n    });\n  }\n\n  render() {\n    const { isLoading, ranking } = this.state;\n    return (\n      <div>\n        <Header />\n        { !isLoading && ranking.length > 0 ? <Table ranking={ ranking } />\n          : (\n            <div className=\"center\">\n              <Loading />\n            </div>)}\n        <Button />\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React, { Component } from 'react';\n\nclass Setting extends Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Settings</h1>\n    );\n  }\n}\n\nexport default Setting;\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport { Login, Feedback, Quiz, Ranking, Setting } from './pages';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/\" exact component={ Login } />\n        <Route path=\"/quiz\" component={ Quiz } />\n        <Route path=\"/settings\" component={ Setting } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\nimport Routes from './Routes';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Routes />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}